-------------------------------------------------------------------------------------
--
-- Distributed under MIT Licence
--   See https://github.com/philipabbey/fpga/blob/main/LICENCE.
--
-------------------------------------------------------------------------------------
--
-- test_data_fft_pkg.vhdl
-- This file of test data was generated by Octave.
--
-- References:
--   1) https://www.youtube.com/watch?v=AF71Yqo7CoY
--   2) https://www.youtube.com/watch?v=xnVaHkRaJOw
--
-- P A Abbey, 22 Oct 2021
--
-------------------------------------------------------------------------------------

use work.test_fft_pkg.complex_vector_arr_t;

package test_data_fft_pkg is

  constant input_data_point4_c : complex_vector_arr_t(open)(0 to 3) := (
    1 => (
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    1.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    2 => (
      (re =>   -1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    5.000000, im =>   -1.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    3 => (
      (re =>    2.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000)
    ),
    4 => (
      (re =>    1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>   -2.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000)
    )
  );

  constant output_data_point4_c : complex_vector_arr_t(open)(0 to 3) := (
    1 => (
      (re =>    2.000000, im =>    1.000000),
      (re =>    2.000000, im =>   -1.000000),
      (re =>    0.000000, im =>   -1.000000),
      (re =>    0.000000, im =>    1.000000)
    ),
    2 => (
      (re =>    4.000000, im =>   -1.000000),
      (re =>   -6.000000, im =>    1.000000),
      (re =>    4.000000, im =>   -1.000000),
      (re =>   -6.000000, im =>    1.000000)
    ),
    3 => (
      (re =>    4.000000, im =>    0.000000),
      (re =>    0.000000, im =>    2.000000),
      (re =>    4.000000, im =>    0.000000),
      (re =>    0.000000, im =>   -2.000000)
    ),
    4 => (
      (re =>    0.000000, im =>    0.000000),
      (re =>    3.000000, im =>   -3.000000),
      (re =>   -2.000000, im =>    0.000000),
      (re =>    3.000000, im =>    3.000000)
    )
  );

  constant input_data_point8_c : complex_vector_arr_t(open)(0 to 7) := (
    1 => (
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    2 => (
      (re =>   -1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    3 => (
      (re =>    2.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000)
    ),
    4 => (
      (re =>    1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    3.000000, im =>    0.000000),
      (re =>    4.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>   -3.000000, im =>    0.000000),
      (re =>   -2.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000)
    )
  );

  constant output_data_point8_c : complex_vector_arr_t(open)(0 to 7) := (
    1 => (
      (re =>    3.000000, im =>    0.000000),
      (re =>    1.707107, im =>   -1.707107),
      (re =>    0.000000, im =>   -1.000000),
      (re =>    0.292893, im =>    0.292893),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.292893, im =>   -0.292893),
      (re =>    0.000000, im =>    1.000000),
      (re =>    1.707107, im =>    1.707107)
    ),
    2 => (
      (re =>   -1.000000, im =>    0.000000),
      (re =>    3.000000, im =>    0.000000),
      (re =>   -9.000000, im =>    0.000000),
      (re =>    3.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    3.000000, im =>    0.000000),
      (re =>   -9.000000, im =>    0.000000),
      (re =>    3.000000, im =>    0.000000)
    ),
    3 => (
      (re =>   14.000000, im =>    0.000000),
      (re =>   -3.000000, im =>   -3.000000),
      (re =>    0.000000, im =>    4.000000),
      (re =>   -3.000000, im =>    3.000000),
      (re =>   14.000000, im =>    0.000000),
      (re =>   -3.000000, im =>   -3.000000),
      (re =>    0.000000, im =>   -4.000000),
      (re =>   -3.000000, im =>    3.000000)
    ),
    4 => (
      (re =>    0.000000, im =>    0.000000),
      (re =>    5.000000, im =>  -12.071068),
      (re =>   -4.000000, im =>    4.000000),
      (re =>    5.000000, im =>   -2.071068),
      (re =>   -4.000000, im =>    0.000000),
      (re =>    5.000000, im =>    2.071068),
      (re =>   -4.000000, im =>   -4.000000),
      (re =>    5.000000, im =>   12.071068)
    )
  );

  constant input_data_point16_c : complex_vector_arr_t(open)(0 to 15) := (
    1 => (
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    2 => (
      (re =>   -1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    3 => (
      (re =>    2.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000)
    ),
    4 => (
      (re =>    1.000000, im =>    1.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    3.000000, im =>    0.000000),
      (re =>    4.000000, im =>   -1.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>    6.000000, im =>    0.000000),
      (re =>    7.000000, im =>   -1.000000),
      (re =>    8.000000, im =>    0.000000),
      (re =>   -8.000000, im =>    0.000000),
      (re =>   -7.000000, im =>    0.000000),
      (re =>   -6.000000, im =>    1.000000),
      (re =>   -5.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>   -3.000000, im =>    1.000000),
      (re =>   -2.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000)
    )
  );

  constant output_data_point16_c : complex_vector_arr_t(open)(0 to 15) := (
    1 => (
      (re =>    6.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    3.414214, im =>   -3.414214),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>   -2.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.585786, im =>    0.585786),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.585786, im =>   -0.585786),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    2.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    3.414214, im =>    3.414214),
      (re =>    0.000000, im =>    0.000000)
    ),
    2 => (
      (re =>   -2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    6.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>  -18.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    6.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    6.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>  -18.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    6.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    3 => (
      (re =>   28.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -6.000000, im =>   -6.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    8.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -6.000000, im =>    6.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   28.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -6.000000, im =>   -6.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>   -8.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -6.000000, im =>    6.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    4 => (
      (re =>    0.000000, im =>    1.000000),
      (re =>    5.738027, im =>  -44.246055),
      (re =>   -7.414214, im =>   20.313708),
      (re =>    8.351153, im =>  -12.469452),
      (re =>   -6.000000, im =>    9.000000),
      (re =>   11.179580, im =>   -5.013608),
      (re =>  -11.414214, im =>    4.313708),
      (re =>    8.566454, im =>   -0.790211),
      (re =>   -8.000000, im =>    1.000000),
      (re =>    9.433546, im =>    2.790211),
      (re =>   -4.585786, im =>   -2.313708),
      (re =>    6.820420, im =>    7.013608),
      (re =>  -10.000000, im =>   -7.000000),
      (re =>    9.648847, im =>   14.469452),
      (re =>   -8.585786, im =>  -18.313708),
      (re =>   12.261973, im =>   46.246055)
    )
  );

  constant input_data_point32_c : complex_vector_arr_t(open)(0 to 31) := (
    1 => (
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    2 => (
      (re =>   -1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -8.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    5.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -1.000000, im =>    0.000000),
      (re =>    1.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>   -4.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    2.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    )
  );

  constant output_data_point32_c : complex_vector_arr_t(open)(0 to 31) := (
    1 => (
      (re =>   12.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    6.828427, im =>   -6.828427),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>   -4.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    1.171573, im =>    1.171573),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    4.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    1.171573, im =>   -1.171573),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    4.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    6.828427, im =>    6.828427),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000),
      (re =>    0.000000, im =>    0.000000)
    ),
    2 => (
      (re =>   -1.000000, im =>    0.000000),
      (re =>   -4.572175, im =>    6.866734),
      (re =>    2.137588, im =>    2.534924),
      (re =>    1.877343, im =>    8.667364),
      (re =>   12.464466, im =>   -3.535534),
      (re =>    6.797343, im =>    0.073561),
      (re =>   -7.773720, im =>   -2.310754),
      (re =>   -1.311032, im =>   -9.399375),
      (re =>  -40.000000, im =>    3.000000),
      (re =>   -4.345822, im =>   -3.742521),
      (re =>    7.773720, im =>    5.689246),
      (re =>   -1.140489, im =>    5.730415),
      (re =>   19.535534, im =>   -3.535534),
      (re =>    3.779512, im =>    3.010510),
      (re =>   -2.137588, im =>   -5.465076),
      (re =>   -1.084679, im =>    1.209880),
      (re =>  -15.000000, im =>    0.000000),
      (re =>   -1.084679, im =>   -1.209880),
      (re =>   -2.137588, im =>    5.465076),
      (re =>    3.779512, im =>   -3.010510),
      (re =>   19.535534, im =>    3.535534),
      (re =>   -1.140489, im =>   -5.730415),
      (re =>    7.773720, im =>   -5.689246),
      (re =>   -4.345822, im =>    3.742521),
      (re =>  -40.000000, im =>   -3.000000),
      (re =>   -1.311032, im =>    9.399375),
      (re =>   -7.773720, im =>    2.310754),
      (re =>    6.797343, im =>   -0.073561),
      (re =>   12.464466, im =>    3.535534),
      (re =>    1.877343, im =>   -8.667364),
      (re =>    2.137588, im =>   -2.534924),
      (re =>   -4.572175, im =>   -6.866734)
    )
  );

  constant input_data_point512_c : complex_vector_arr_t(open)(0 to 511) := (
    1 => (
      (re =>    0.049917, im =>    0.000000),
      (re =>    0.393379, im =>    0.000000),
      (re =>    0.711527, im =>    0.000000),
      (re =>    0.985378, im =>    0.000000),
      (re =>    1.199135, im =>    0.000000),
      (re =>    1.341258, im =>    0.000000),
      (re =>    1.405189, im =>    0.000000),
      (re =>    1.389698, im =>    0.000000),
      (re =>    1.298810, im =>    0.000000),
      (re =>    1.141342, im =>    0.000000),
      (re =>    0.930088, im =>    0.000000),
      (re =>    0.680726, im =>    0.000000),
      (re =>    0.410545, im =>    0.000000),
      (re =>    0.137100, im =>    0.000000),
      (re =>   -0.123095, im =>    0.000000),
      (re =>   -0.355725, im =>    0.000000),
      (re =>   -0.549600, im =>    0.000000),
      (re =>   -0.697268, im =>    0.000000),
      (re =>   -0.795291, im =>    0.000000),
      (re =>   -0.844159, im =>    0.000000),
      (re =>   -0.847884, im =>    0.000000),
      (re =>   -0.813301, im =>    0.000000),
      (re =>   -0.749177, im =>    0.000000),
      (re =>   -0.665198, im =>    0.000000),
      (re =>   -0.570946, im =>    0.000000),
      (re =>   -0.474964, im =>    0.000000),
      (re =>   -0.383984, im =>    0.000000),
      (re =>   -0.302399, im =>    0.000000),
      (re =>   -0.232023, im =>    0.000000),
      (re =>   -0.172144, im =>    0.000000),
      (re =>   -0.119866, im =>    0.000000),
      (re =>   -0.070702, im =>    0.000000),
      (re =>   -0.019331, im =>    0.000000),
      (re =>    0.039531, im =>    0.000000),
      (re =>    0.110270, im =>    0.000000),
      (re =>    0.195599, im =>    0.000000),
      (re =>    0.295950, im =>    0.000000),
      (re =>    0.409119, im =>    0.000000),
      (re =>    0.530194, im =>    0.000000),
      (re =>    0.651781, im =>    0.000000),
      (re =>    0.764535, im =>    0.000000),
      (re =>    0.857928, im =>    0.000000),
      (re =>    0.921215, im =>    0.000000),
      (re =>    0.944481, im =>    0.000000),
      (re =>    0.919702, im =>    0.000000),
      (re =>    0.841699, im =>    0.000000),
      (re =>    0.708894, im =>    0.000000),
      (re =>    0.523789, im =>    0.000000),
      (re =>    0.293121, im =>    0.000000),
      (re =>    0.027647, im =>    0.000000),
      (re =>   -0.258423, im =>    0.000000),
      (re =>   -0.548316, im =>    0.000000),
      (re =>   -0.823845, im =>    0.000000),
      (re =>   -1.066727, im =>    0.000000),
      (re =>   -1.259962, im =>    0.000000),
      (re =>   -1.389166, im =>    0.000000),
      (re =>   -1.443740, im =>    0.000000),
      (re =>   -1.417779, im =>    0.000000),
      (re =>   -1.310642, im =>    0.000000),
      (re =>   -1.127126, im =>    0.000000),
      (re =>   -0.877230, im =>    0.000000),
      (re =>   -0.575512, im =>    0.000000),
      (re =>   -0.240104, im =>    0.000000),
      (re =>    0.108562, im =>    0.000000),
      (re =>    0.449193, im =>    0.000000),
      (re =>    0.761149, im =>    0.000000),
      (re =>    1.025896, im =>    0.000000),
      (re =>    1.228286, im =>    0.000000),
      (re =>    1.357577, im =>    0.000000),
      (re =>    1.408093, im =>    0.000000),
      (re =>    1.379504, im =>    0.000000),
      (re =>    1.276684, im =>    0.000000),
      (re =>    1.109184, im =>    0.000000),
      (re =>    0.890366, im =>    0.000000),
      (re =>    0.636270, im =>    0.000000),
      (re =>    0.364325, im =>    0.000000),
      (re =>    0.092000, im =>    0.000000),
      (re =>   -0.164487, im =>    0.000000),
      (re =>   -0.391287, im =>    0.000000),
      (re =>   -0.577806, im =>    0.000000),
      (re =>   -0.717257, im =>    0.000000),
      (re =>   -0.806877, im =>    0.000000),
      (re =>   -0.847787, im =>    0.000000),
      (re =>   -0.844528, im =>    0.000000),
      (re =>   -0.804327, im =>    0.000000),
      (re =>   -0.736177, im =>    0.000000),
      (re =>   -0.649818, im =>    0.000000),
      (re =>   -0.554719, im =>    0.000000),
      (re =>   -0.459166, im =>    0.000000),
      (re =>   -0.369527, im =>    0.000000),
      (re =>   -0.289771, im =>    0.000000),
      (re =>   -0.221275, im =>    0.000000),
      (re =>   -0.162928, im =>    0.000000),
      (re =>   -0.111521, im =>    0.000000),
      (re =>   -0.062367, im =>    0.000000),
      (re =>   -0.010093, im =>    0.000000),
      (re =>    0.050496, im =>    0.000000),
      (re =>    0.123555, im =>    0.000000),
      (re =>    0.211448, im =>    0.000000),
      (re =>    0.314183, im =>    0.000000),
      (re =>    0.429097, im =>    0.000000),
      (re =>    0.550836, im =>    0.000000),
      (re =>    0.671635, im =>    0.000000),
      (re =>    0.781888, im =>    0.000000),
      (re =>    0.870962, im =>    0.000000),
      (re =>    0.928174, im =>    0.000000),
      (re =>    0.943855, im =>    0.000000),
      (re =>    0.910400, im =>    0.000000),
      (re =>    0.823186, im =>    0.000000),
      (re =>    0.681296, im =>    0.000000),
      (re =>    0.487944, im =>    0.000000),
      (re =>    0.250568, im =>    0.000000),
      (re =>   -0.019445, im =>    0.000000),
      (re =>   -0.307384, im =>    0.000000),
      (re =>   -0.596154, im =>    0.000000),
      (re =>   -0.867454, im =>    0.000000),
      (re =>   -1.103122, im =>    0.000000),
      (re =>   -1.286507, im =>    0.000000),
      (re =>   -1.403785, im =>    0.000000),
      (re =>   -1.445092, im =>    0.000000),
      (re =>   -1.405378, im =>    0.000000),
      (re =>   -1.284916, im =>    0.000000),
      (re =>   -1.089405, im =>    0.000000),
      (re =>   -0.829666, im =>    0.000000),
      (re =>   -0.520935, im =>    0.000000),
      (re =>   -0.181827, im =>    0.000000),
      (re =>    0.166978, im =>    0.000000),
      (re =>    0.504191, im =>    0.000000),
      (re =>    0.809428, im =>    0.000000),
      (re =>    1.064640, im =>    0.000000),
      (re =>    1.255359, im =>    0.000000),
      (re =>    1.371656, im =>    0.000000),
      (re =>    1.408749, im =>    0.000000),
      (re =>    1.367201, im =>    0.000000),
      (re =>    1.252721, im =>    0.000000),
      (re =>    1.075569, im =>    0.000000),
      (re =>    0.849643, im =>    0.000000),
      (re =>    0.591309, im =>    0.000000),
      (re =>    0.318097, im =>    0.000000),
      (re =>    0.047352, im =>    0.000000),
      (re =>   -0.205032, im =>    0.000000),
      (re =>   -0.425701, im =>    0.000000),
      (re =>   -0.604672, im =>    0.000000),
      (re =>   -0.735827, im =>    0.000000),
      (re =>   -0.817078, im =>    0.000000),
      (re =>   -0.850160, im =>    0.000000),
      (re =>   -0.840124, im =>    0.000000),
      (re =>   -0.794561, im =>    0.000000),
      (re =>   -0.722663, im =>    0.000000),
      (re =>   -0.634193, im =>    0.000000),
      (re =>   -0.538483, im =>    0.000000),
      (re =>   -0.443540, im =>    0.000000),
      (re =>   -0.355355, im =>    0.000000),
      (re =>   -0.277467, im =>    0.000000),
      (re =>   -0.210818, im =>    0.000000),
      (re =>   -0.153912, im =>    0.000000),
      (re =>   -0.103241, im =>    0.000000),
      (re =>   -0.053944, im =>    0.000000),
      (re =>   -0.000617, im =>    0.000000),
      (re =>    0.061818, im =>    0.000000),
      (re =>    0.137264, im =>    0.000000),
      (re =>    0.227723, im =>    0.000000),
      (re =>    0.332767, im =>    0.000000),
      (re =>    0.449274, im =>    0.000000),
      (re =>    0.571456, im =>    0.000000),
      (re =>    0.691193, im =>    0.000000),
      (re =>    0.798643, im =>    0.000000),
      (re =>    0.883092, im =>    0.000000),
      (re =>    0.933953, im =>    0.000000),
      (re =>    0.941834, im =>    0.000000),
      (re =>    0.899569, im =>    0.000000),
      (re =>    0.803117, im =>    0.000000),
      (re =>    0.652233, im =>    0.000000),
      (re =>    0.450846, im =>    0.000000),
      (re =>    0.207086, im =>    0.000000),
      (re =>   -0.067049, im =>    0.000000),
      (re =>   -0.356372, im =>    0.000000),
      (re =>   -0.643497, im =>    0.000000),
      (re =>   -0.910053, im =>    0.000000),
      (re =>   -1.138033, im =>    0.000000),
      (re =>   -1.311174, im =>    0.000000),
      (re =>   -1.416245, im =>    0.000000),
      (re =>   -1.444141, im =>    0.000000),
      (re =>   -1.390682, im =>    0.000000),
      (re =>   -1.257056, im =>    0.000000),
      (re =>   -1.049858, im =>    0.000000),
      (re =>   -0.780709, im =>    0.000000),
      (re =>   -0.465495, im =>    0.000000),
      (re =>   -0.123274, im =>    0.000000),
      (re =>    0.225064, im =>    0.000000),
      (re =>    0.558280, im =>    0.000000),
      (re =>    0.856284, im =>    0.000000),
      (re =>    1.101550, im =>    0.000000),
      (re =>    1.280315, im =>    0.000000),
      (re =>    1.383484, im =>    0.000000),
      (re =>    1.407169, im =>    0.000000),
      (re =>    1.352826, im =>    0.000000),
      (re =>    1.226978, im =>    0.000000),
      (re =>    1.040570, im =>    0.000000),
      (re =>    0.808001, im =>    0.000000),
      (re =>    0.545928, im =>    0.000000),
      (re =>    0.271942, im =>    0.000000),
      (re =>    0.003230, im =>    0.000000),
      (re =>   -0.244672, im =>    0.000000),
      (re =>   -0.458928, im =>    0.000000),
      (re =>   -0.630176, im =>    0.000000),
      (re =>   -0.752978, im =>    0.000000),
      (re =>   -0.825910, im =>    0.000000),
      (re =>   -0.851308, im =>    0.000000),
      (re =>   -0.834711, im =>    0.000000),
      (re =>   -0.784049, im =>    0.000000),
      (re =>   -0.708681, im =>    0.000000),
      (re =>   -0.618368, im =>    0.000000),
      (re =>   -0.522274, im =>    0.000000),
      (re =>   -0.428111, im =>    0.000000),
      (re =>   -0.341480, im =>    0.000000),
      (re =>   -0.265486, im =>    0.000000),
      (re =>   -0.200642, im =>    0.000000),
      (re =>   -0.145075, im =>    0.000000),
      (re =>   -0.095000, im =>    0.000000),
      (re =>   -0.045406, im =>    0.000000),
      (re =>    0.009119, im =>    0.000000),
      (re =>    0.073513, im =>    0.000000),
      (re =>    0.151404, im =>    0.000000),
      (re =>    0.244416, im =>    0.000000),
      (re =>    0.351681, im =>    0.000000),
      (re =>    0.469616, im =>    0.000000),
      (re =>    0.592011, im =>    0.000000),
      (re =>    0.710405, im =>    0.000000),
      (re =>    0.814747, im =>    0.000000),
      (re =>    0.894269, im =>    0.000000),
      (re =>    0.938512, im =>    0.000000),
      (re =>    0.938388, im =>    0.000000),
      (re =>    0.887197, im =>    0.000000),
      (re =>    0.781499, im =>    0.000000),
      (re =>    0.621732, im =>    0.000000),
      (re =>    0.412540, im =>    0.000000),
      (re =>    0.162737, im =>    0.000000),
      (re =>   -0.115088, im =>    0.000000),
      (re =>   -0.405300, im =>    0.000000),
      (re =>   -0.690259, im =>    0.000000),
      (re =>   -0.951557, im =>    0.000000),
      (re =>   -1.171386, im =>    0.000000),
      (re =>   -1.333907, im =>    0.000000),
      (re =>   -1.426512, im =>    0.000000),
      (re =>   -1.440877, im =>    0.000000),
      (re =>   -1.373706, im =>    0.000000),
      (re =>   -1.227105, im =>    0.000000),
      (re =>   -1.008549, im =>    0.000000),
      (re =>   -0.730442, im =>    0.000000),
      (re =>   -0.409286, im =>    0.000000),
      (re =>   -0.064548, im =>    0.000000),
      (re =>    0.282721, im =>    0.000000),
      (re =>    0.611367, im =>    0.000000),
      (re =>    0.901641, im =>    0.000000),
      (re =>    1.136570, im =>    0.000000),
      (re =>    1.303122, im =>    0.000000),
      (re =>    1.393052, im =>    0.000000),
      (re =>    1.403371, im =>    0.000000),
      (re =>    1.336418, im =>    0.000000),
      (re =>    1.199514, im =>    0.000000),
      (re =>    1.004260, im =>    0.000000),
      (re =>    0.765523, im =>    0.000000),
      (re =>    0.500211, im =>    0.000000),
      (re =>    0.225940, im =>    0.000000),
      (re =>   -0.040297, im =>    0.000000),
      (re =>   -0.283353, im =>    0.000000),
      (re =>   -0.490929, im =>    0.000000),
      (re =>   -0.654301, im =>    0.000000),
      (re =>   -0.768710, im =>    0.000000),
      (re =>   -0.833390, im =>    0.000000),
      (re =>   -0.851264, im =>    0.000000),
      (re =>   -0.828332, im =>    0.000000),
      (re =>   -0.772838, im =>    0.000000),
      (re =>   -0.694279, im =>    0.000000),
      (re =>   -0.602382, im =>    0.000000),
      (re =>   -0.506124, im =>    0.000000),
      (re =>   -0.412900, im =>    0.000000),
      (re =>   -0.327912, im =>    0.000000),
      (re =>   -0.253826, im =>    0.000000),
      (re =>   -0.190732, im =>    0.000000),
      (re =>   -0.136396, im =>    0.000000),
      (re =>   -0.086775, im =>    0.000000),
      (re =>   -0.036728, im =>    0.000000),
      (re =>    0.019137, im =>    0.000000),
      (re =>    0.085594, im =>    0.000000),
      (re =>    0.165977, im =>    0.000000),
      (re =>    0.261519, im =>    0.000000),
      (re =>    0.370902, im =>    0.000000),
      (re =>    0.490090, im =>    0.000000),
      (re =>    0.612457, im =>    0.000000),
      (re =>    0.729222, im =>    0.000000),
      (re =>    0.830148, im =>    0.000000),
      (re =>    0.904446, im =>    0.000000),
      (re =>    0.941812, im =>    0.000000),
      (re =>    0.933490, im =>    0.000000),
      (re =>    0.873276, im =>    0.000000),
      (re =>    0.758343, im =>    0.000000),
      (re =>    0.589825, im =>    0.000000),
      (re =>    0.373078, im =>    0.000000),
      (re =>    0.117588, im =>    0.000000),
      (re =>   -0.163481, im =>    0.000000),
      (re =>   -0.454082, im =>    0.000000),
      (re =>   -0.736350, im =>    0.000000),
      (re =>   -0.991884, im =>    0.000000),
      (re =>   -1.203111, im =>    0.000000),
      (re =>   -1.354653, im =>    0.000000),
      (re =>   -1.434555, im =>    0.000000),
      (re =>   -1.435296, im =>    0.000000),
      (re =>   -1.354473, im =>    0.000000),
      (re =>   -1.195108, im =>    0.000000),
      (re =>   -0.965548, im =>    0.000000),
      (re =>   -0.678951, im =>    0.000000),
      (re =>   -0.352407, im =>    0.000000),
      (re =>   -0.005749, im =>    0.000000),
      (re =>    0.339847, im =>    0.000000),
      (re =>    0.663363, im =>    0.000000),
      (re =>    0.945424, im =>    0.000000),
      (re =>    1.169645, im =>    0.000000),
      (re =>    1.323750, im =>    0.000000),
      (re =>    1.400356, im =>    0.000000),
      (re =>    1.397377, im =>    0.000000),
      (re =>    1.318023, im =>    0.000000),
      (re =>    1.170393, im =>    0.000000),
      (re =>    0.966716, im =>    0.000000),
      (re =>    0.722292, im =>    0.000000),
      (re =>    0.454242, im =>    0.000000),
      (re =>    0.180170, im =>    0.000000),
      (re =>   -0.083163, im =>    0.000000),
      (re =>   -0.321023, im =>    0.000000),
      (re =>   -0.521671, im =>    0.000000),
      (re =>   -0.677033, im =>    0.000000),
      (re =>   -0.783027, im =>    0.000000),
      (re =>   -0.839540, im =>    0.000000),
      (re =>   -0.850060, im =>    0.000000),
      (re =>   -0.821030, im =>    0.000000),
      (re =>   -0.760974, im =>    0.000000),
      (re =>   -0.679500, im =>    0.000000),
      (re =>   -0.586276, im =>    0.000000),
      (re =>   -0.490065, im =>    0.000000),
      (re =>   -0.397928, im =>    0.000000),
      (re =>   -0.314658, im =>    0.000000),
      (re =>   -0.242482, im =>    0.000000),
      (re =>   -0.181074, im =>    0.000000),
      (re =>   -0.127854, im =>    0.000000),
      (re =>   -0.078538, im =>    0.000000),
      (re =>   -0.027884, im =>    0.000000),
      (re =>    0.029458, im =>    0.000000),
      (re =>    0.098073, im =>    0.000000),
      (re =>    0.180984, im =>    0.000000),
      (re =>    0.279019, im =>    0.000000),
      (re =>    0.390407, im =>    0.000000),
      (re =>    0.510658, im =>    0.000000),
      (re =>    0.632747, im =>    0.000000),
      (re =>    0.747593, im =>    0.000000),
      (re =>    0.844796, im =>    0.000000),
      (re =>    0.913576, im =>    0.000000),
      (re =>    0.943814, im =>    0.000000),
      (re =>    0.927117, im =>    0.000000),
      (re =>    0.857798, im =>    0.000000),
      (re =>    0.733662, im =>    0.000000),
      (re =>    0.556544, im =>    0.000000),
      (re =>    0.332512, im =>    0.000000),
      (re =>    0.071710, im =>    0.000000),
      (re =>   -0.212149, im =>    0.000000),
      (re =>   -0.502629, im =>    0.000000),
      (re =>   -0.781683, im =>    0.000000),
      (re =>   -1.030953, im =>    0.000000),
      (re =>   -1.233141, im =>    0.000000),
      (re =>   -1.373363, im =>    0.000000),
      (re =>   -1.440348, im =>    0.000000),
      (re =>   -1.427396, im =>    0.000000),
      (re =>   -1.333007, im =>    0.000000),
      (re =>   -1.161115, im =>    0.000000),
      (re =>   -0.920924, im =>    0.000000),
      (re =>   -0.626324, im =>    0.000000),
      (re =>   -0.294957, im =>    0.000000),
      (re =>    0.053018, im =>    0.000000),
      (re =>    0.396345, im =>    0.000000),
      (re =>    0.714180, im =>    0.000000),
      (re =>    0.987561, im =>    0.000000),
      (re =>    1.200726, im =>    0.000000),
      (re =>    1.342176, im =>    0.000000),
      (re =>    1.405399, im =>    0.000000),
      (re =>    1.389213, im =>    0.000000),
      (re =>    1.297688, im =>    0.000000),
      (re =>    1.139681, im =>    0.000000),
      (re =>    0.928016, im =>    0.000000),
      (re =>    0.678392, im =>    0.000000),
      (re =>    0.408105, im =>    0.000000),
      (re =>    0.134708, im =>    0.000000),
      (re =>   -0.125301, im =>    0.000000),
      (re =>   -0.357632, im =>    0.000000),
      (re =>   -0.551123, im =>    0.000000),
      (re =>   -0.698360, im =>    0.000000),
      (re =>   -0.795937, im =>    0.000000),
      (re =>   -0.844382, im =>    0.000000),
      (re =>   -0.847733, im =>    0.000000),
      (re =>   -0.812848, im =>    0.000000),
      (re =>   -0.748504, im =>    0.000000),
      (re =>   -0.664392, im =>    0.000000),
      (re =>   -0.570090, im =>    0.000000),
      (re =>   -0.474126, im =>    0.000000),
      (re =>   -0.383213, im =>    0.000000),
      (re =>   -0.301724, im =>    0.000000),
      (re =>   -0.231448, im =>    0.000000),
      (re =>   -0.171651, im =>    0.000000),
      (re =>   -0.119423, im =>    0.000000),
      (re =>   -0.070263, im =>    0.000000),
      (re =>   -0.018849, im =>    0.000000),
      (re =>    0.040101, im =>    0.000000),
      (re =>    0.110962, im =>    0.000000),
      (re =>    0.196425, im =>    0.000000),
      (re =>    0.296904, im =>    0.000000),
      (re =>    0.410169, im =>    0.000000),
      (re =>    0.531284, im =>    0.000000),
      (re =>    0.652836, im =>    0.000000),
      (re =>    0.765465, im =>    0.000000),
      (re =>    0.858639, im =>    0.000000),
      (re =>    0.921611, im =>    0.000000),
      (re =>    0.944482, im =>    0.000000),
      (re =>    0.919249, im =>    0.000000),
      (re =>    0.840760, im =>    0.000000),
      (re =>    0.707473, im =>    0.000000),
      (re =>    0.521928, im =>    0.000000),
      (re =>    0.290897, im =>    0.000000),
      (re =>    0.025174, im =>    0.000000),
      (re =>   -0.261007, im =>    0.000000),
      (re =>   -0.550853, im =>    0.000000),
      (re =>   -0.826172, im =>    0.000000),
      (re =>   -1.068685, im =>    0.000000),
      (re =>   -1.261411, im =>    0.000000),
      (re =>   -1.389992, im =>    0.000000),
      (re =>   -1.443869, im =>    0.000000),
      (re =>   -1.417181, im =>    0.000000),
      (re =>   -1.309337, im =>    0.000000),
      (re =>   -1.125180, im =>    0.000000),
      (re =>   -0.874754, im =>    0.000000),
      (re =>   -0.572652, im =>    0.000000),
      (re =>   -0.237034, im =>    0.000000),
      (re =>    0.111654, im =>    0.000000),
      (re =>    0.452119, im =>    0.000000),
      (re =>    0.763733, im =>    0.000000),
      (re =>    1.027987, im =>    0.000000),
      (re =>    1.229768, im =>    0.000000),
      (re =>    1.358377, im =>    0.000000),
      (re =>    1.408184, im =>    0.000000),
      (re =>    1.378907, im =>    0.000000),
      (re =>    1.275464, im =>    0.000000),
      (re =>    1.107444, im =>    0.000000),
      (re =>    0.888239, im =>    0.000000),
      (re =>    0.633907, im =>    0.000000),
      (re =>    0.361883, im =>    0.000000),
      (re =>    0.089629, im =>    0.000000),
      (re =>   -0.166650, im =>    0.000000),
      (re =>   -0.393134, im =>    0.000000),
      (re =>   -0.579259, im =>    0.000000),
      (re =>   -0.718273, im =>    0.000000),
      (re =>   -0.807450, im =>    0.000000),
      (re =>   -0.847944, im =>    0.000000),
      (re =>   -0.844321, im =>    0.000000),
      (re =>   -0.803831, im =>    0.000000),
      (re =>   -0.735476, im =>    0.000000),
      (re =>   -0.648998, im =>    0.000000),
      (re =>   -0.553861, im =>    0.000000),
      (re =>   -0.458336, im =>    0.000000),
      (re =>   -0.368771, im =>    0.000000),
      (re =>   -0.289113, im =>    0.000000),
      (re =>   -0.220715, im =>    0.000000),
      (re =>   -0.162447, im =>    0.000000),
      (re =>   -0.111082, im =>    0.000000),
      (re =>   -0.061925, im =>    0.000000),
      (re =>   -0.009598, im =>    0.000000),
      (re =>    0.051085, im =>    0.000000),
      (re =>    0.124268, im =>    0.000000),
      (re =>    0.212297, im =>    0.000000),
      (re =>    0.315156, im =>    0.000000),
      (re =>    0.430158, im =>    0.000000),
      (re =>    0.551926, im =>    0.000000),
      (re =>    0.672675, im =>    0.000000),
      (re =>    0.782788, im =>    0.000000),
      (re =>    0.871625, im =>    0.000000),
      (re =>    0.928509, im =>    0.000000),
      (re =>    0.943784, im =>    0.000000),
      (re =>    0.909866, im =>    0.000000),
      (re =>    0.822165, im =>    0.000000),
      (re =>    0.679797, im =>    0.000000),
      (re =>    0.486016, im =>    0.000000),
      (re =>    0.248294, im =>    0.000000),
      (re =>   -0.021947, im =>    0.000000),
      (re =>   -0.309972, im =>    0.000000),
      (re =>   -0.598667, im =>    0.000000),
      (re =>   -0.869731, im =>    0.000000),
      (re =>   -1.105004, im =>    0.000000),
      (re =>   -1.287858, im =>    0.000000),
      (re =>   -1.404498, im =>    0.000000),
      (re =>   -1.445099, im =>    0.000000),
      (re =>   -1.404659, im =>    0.000000),
      (re =>   -1.283497, im =>    0.000000),
      (re =>   -1.087361, im =>    0.000000),
      (re =>   -0.827114, im =>    0.000000),
      (re =>   -0.518028, im =>    0.000000),
      (re =>   -0.178740, im =>    0.000000),
      (re =>    0.170055, im =>    0.000000),
      (re =>    0.507071, im =>    0.000000),
      (re =>    0.811939, im =>    0.000000),
      (re =>    1.066636, im =>    0.000000),
      (re =>    1.256730, im =>    0.000000),
      (re =>    1.372337, im =>    0.000000),
      (re =>    1.408721, im =>    0.000000),
      (re =>    1.366494, im =>    0.000000),
      (re =>    1.251405, im =>    0.000000)
    )
  );

  constant output_data_point512_c : complex_vector_arr_t(open)(0 to 511) := (
    1 => (
      (re =>    9.189077, im =>    0.000000),
      (re =>    9.219019, im =>   -0.304696),
      (re =>    9.310078, im =>   -0.616236),
      (re =>    9.466089, im =>   -0.941996),
      (re =>    9.693927, im =>   -1.290498),
      (re =>   10.004356, im =>   -1.672233),
      (re =>   10.413486, im =>   -2.100870),
      (re =>   10.945268, im =>   -2.595168),
      (re =>   11.635841, im =>   -3.182211),
      (re =>   12.541484, im =>   -3.903260),
      (re =>   13.754122, im =>   -4.825119),
      (re =>   15.434312, im =>   -6.064346),
      (re =>   17.890038, im =>   -7.845200),
      (re =>   21.798369, im =>  -10.662970),
      (re =>   29.004652, im =>  -15.873692),
      (re =>   47.013247, im =>  -29.010643),
      (re =>  184.024138, im => -129.993073),
      (re =>  -67.663872, im =>   56.281740),
      (re =>  -22.824658, im =>   23.626935),
      (re =>  -10.291606, im =>   15.049123),
      (re =>   -3.430564, im =>   11.009770),
      (re =>    2.153261, im =>    8.561038),
      (re =>    8.816070, im =>    6.750553),
      (re =>   21.467936, im =>    4.920477),
      (re =>   84.530158, im =>   -0.153136),
      (re =>  -76.878968, im =>   10.449459),
      (re =>  -29.737707, im =>    6.744859),
      (re =>  -19.176901, im =>    5.648397),
      (re =>  -14.383555, im =>    5.009869),
      (re =>  -11.593665, im =>    4.555272),
      (re =>   -9.745463, im =>    4.201425),
      (re =>   -8.420366, im =>    3.912255),
      (re =>   -7.418586, im =>    3.668624),
      (re =>   -6.632003, im =>    3.458996),
      (re =>   -5.996639, im =>    3.275798),
      (re =>   -5.472024, im =>    3.113747),
      (re =>   -5.031198, im =>    2.968995),
      (re =>   -4.655442, im =>    2.838642),
      (re =>   -4.331317, im =>    2.720443),
      (re =>   -4.048901, im =>    2.612626),
      (re =>   -3.800694, im =>    2.513767),
      (re =>   -3.580915, im =>    2.422702),
      (re =>   -3.385025, im =>    2.338472),
      (re =>   -3.209413, im =>    2.260275),
      (re =>   -3.051164, im =>    2.187436),
      (re =>   -2.907896, im =>    2.119380),
      (re =>   -2.777646, im =>    2.055615),
      (re =>   -2.658780, im =>    1.995719),
      (re =>   -2.549924, im =>    1.939321),
      (re =>   -2.449918, im =>    1.886103),
      (re =>   -2.357771, im =>    1.835781),
      (re =>   -2.272634, im =>    1.788108),
      (re =>   -2.193777, im =>    1.742865),
      (re =>   -2.120565, im =>    1.699855),
      (re =>   -2.052444, im =>    1.658906),
      (re =>   -1.988931, im =>    1.619861),
      (re =>   -1.929601, im =>    1.582580),
      (re =>   -1.874077, im =>    1.546936),
      (re =>   -1.822027, im =>    1.512816),
      (re =>   -1.773156, im =>    1.480117),
      (re =>   -1.727200, im =>    1.448744),
      (re =>   -1.683922, im =>    1.418611),
      (re =>   -1.643110, im =>    1.389641),
      (re =>   -1.604575, im =>    1.361761),
      (re =>   -1.568144, im =>    1.334907),
      (re =>   -1.533662, im =>    1.309018),
      (re =>   -1.500988, im =>    1.284038),
      (re =>   -1.469994, im =>    1.259916),
      (re =>   -1.440563, im =>    1.236604),
      (re =>   -1.412588, im =>    1.214059),
      (re =>   -1.385974, im =>    1.192241),
      (re =>   -1.360630, im =>    1.171111),
      (re =>   -1.336476, im =>    1.150634),
      (re =>   -1.313435, im =>    1.130777),
      (re =>   -1.291440, im =>    1.111511),
      (re =>   -1.270425, im =>    1.092806),
      (re =>   -1.250334, im =>    1.074635),
      (re =>   -1.231111, im =>    1.056975),
      (re =>   -1.212706, im =>    1.039800),
      (re =>   -1.195072, im =>    1.023091),
      (re =>   -1.178166, im =>    1.006825),
      (re =>   -1.161949, im =>    0.990983),
      (re =>   -1.146382, im =>    0.975548),
      (re =>   -1.131430, im =>    0.960502),
      (re =>   -1.117062, im =>    0.945828),
      (re =>   -1.103247, im =>    0.931512),
      (re =>   -1.089956, im =>    0.917538),
      (re =>   -1.077163, im =>    0.903894),
      (re =>   -1.064844, im =>    0.890566),
      (re =>   -1.052974, im =>    0.877542),
      (re =>   -1.041532, im =>    0.864810),
      (re =>   -1.030498, im =>    0.852360),
      (re =>   -1.019853, im =>    0.840180),
      (re =>   -1.009577, im =>    0.828261),
      (re =>   -0.999655, im =>    0.816593),
      (re =>   -0.990070, im =>    0.805168),
      (re =>   -0.980807, im =>    0.793976),
      (re =>   -0.971851, im =>    0.783009),
      (re =>   -0.963190, im =>    0.772260),
      (re =>   -0.954810, im =>    0.761722),
      (re =>   -0.946700, im =>    0.751386),
      (re =>   -0.938848, im =>    0.741247),
      (re =>   -0.931243, im =>    0.731297),
      (re =>   -0.923875, im =>    0.721531),
      (re =>   -0.916734, im =>    0.711943),
      (re =>   -0.909811, im =>    0.702527),
      (re =>   -0.903098, im =>    0.693277),
      (re =>   -0.896586, im =>    0.684188),
      (re =>   -0.890267, im =>    0.675256),
      (re =>   -0.884134, im =>    0.666475),
      (re =>   -0.878179, im =>    0.657841),
      (re =>   -0.872397, im =>    0.649350),
      (re =>   -0.866780, im =>    0.640997),
      (re =>   -0.861322, im =>    0.632777),
      (re =>   -0.856018, im =>    0.624688),
      (re =>   -0.850861, im =>    0.616726),
      (re =>   -0.845847, im =>    0.608886),
      (re =>   -0.840971, im =>    0.601165),
      (re =>   -0.836227, im =>    0.593561),
      (re =>   -0.831611, im =>    0.586069),
      (re =>   -0.827119, im =>    0.578686),
      (re =>   -0.822746, im =>    0.571410),
      (re =>   -0.818489, im =>    0.564238),
      (re =>   -0.814342, im =>    0.557166),
      (re =>   -0.810304, im =>    0.550193),
      (re =>   -0.806369, im =>    0.543315),
      (re =>   -0.802535, im =>    0.536530),
      (re =>   -0.798799, im =>    0.529835),
      (re =>   -0.795157, im =>    0.523229),
      (re =>   -0.791606, im =>    0.516708),
      (re =>   -0.788144, im =>    0.510271),
      (re =>   -0.784768, im =>    0.503916),
      (re =>   -0.781474, im =>    0.497640),
      (re =>   -0.778261, im =>    0.491441),
      (re =>   -0.775126, im =>    0.485319),
      (re =>   -0.772067, im =>    0.479269),
      (re =>   -0.769081, im =>    0.473292),
      (re =>   -0.766166, im =>    0.467384),
      (re =>   -0.763321, im =>    0.461545),
      (re =>   -0.760543, im =>    0.455773),
      (re =>   -0.757830, im =>    0.450066),
      (re =>   -0.755180, im =>    0.444422),
      (re =>   -0.752592, im =>    0.438840),
      (re =>   -0.750063, im =>    0.433319),
      (re =>   -0.747593, im =>    0.427857),
      (re =>   -0.745180, im =>    0.422453),
      (re =>   -0.742821, im =>    0.417105),
      (re =>   -0.740516, im =>    0.411812),
      (re =>   -0.738263, im =>    0.406573),
      (re =>   -0.736061, im =>    0.401387),
      (re =>   -0.733908, im =>    0.396252),
      (re =>   -0.731803, im =>    0.391167),
      (re =>   -0.729745, im =>    0.386131),
      (re =>   -0.727733, im =>    0.381143),
      (re =>   -0.725765, im =>    0.376202),
      (re =>   -0.723840, im =>    0.371307),
      (re =>   -0.721957, im =>    0.366456),
      (re =>   -0.720116, im =>    0.361649),
      (re =>   -0.718315, im =>    0.356886),
      (re =>   -0.716553, im =>    0.352164),
      (re =>   -0.714829, im =>    0.347483),
      (re =>   -0.713143, im =>    0.342842),
      (re =>   -0.711493, im =>    0.338240),
      (re =>   -0.709879, im =>    0.333676),
      (re =>   -0.708299, im =>    0.329150),
      (re =>   -0.706754, im =>    0.324661),
      (re =>   -0.705241, im =>    0.320207),
      (re =>   -0.703761, im =>    0.315788),
      (re =>   -0.702313, im =>    0.311404),
      (re =>   -0.700895, im =>    0.307054),
      (re =>   -0.699508, im =>    0.302736),
      (re =>   -0.698150, im =>    0.298450),
      (re =>   -0.696822, im =>    0.294196),
      (re =>   -0.695522, im =>    0.289972),
      (re =>   -0.694249, im =>    0.285779),
      (re =>   -0.693004, im =>    0.281615),
      (re =>   -0.691785, im =>    0.277479),
      (re =>   -0.690592, im =>    0.273372),
      (re =>   -0.689425, im =>    0.269293),
      (re =>   -0.688283, im =>    0.265240),
      (re =>   -0.687165, im =>    0.261214),
      (re =>   -0.686072, im =>    0.257214),
      (re =>   -0.685002, im =>    0.253239),
      (re =>   -0.683955, im =>    0.249288),
      (re =>   -0.682930, im =>    0.245362),
      (re =>   -0.681928, im =>    0.241460),
      (re =>   -0.680948, im =>    0.237580),
      (re =>   -0.679989, im =>    0.233723),
      (re =>   -0.679051, im =>    0.229889),
      (re =>   -0.678134, im =>    0.226075),
      (re =>   -0.677236, im =>    0.222283),
      (re =>   -0.676359, im =>    0.218512),
      (re =>   -0.675502, im =>    0.214761),
      (re =>   -0.674663, im =>    0.211030),
      (re =>   -0.673843, im =>    0.207317),
      (re =>   -0.673042, im =>    0.203624),
      (re =>   -0.672260, im =>    0.199949),
      (re =>   -0.671495, im =>    0.196293),
      (re =>   -0.670748, im =>    0.192653),
      (re =>   -0.670018, im =>    0.189031),
      (re =>   -0.669305, im =>    0.185426),
      (re =>   -0.668609, im =>    0.181837),
      (re =>   -0.667930, im =>    0.178265),
      (re =>   -0.667267, im =>    0.174707),
      (re =>   -0.666620, im =>    0.171165),
      (re =>   -0.665989, im =>    0.167638),
      (re =>   -0.665373, im =>    0.164125),
      (re =>   -0.664773, im =>    0.160627),
      (re =>   -0.664189, im =>    0.157142),
      (re =>   -0.663619, im =>    0.153671),
      (re =>   -0.663064, im =>    0.150212),
      (re =>   -0.662523, im =>    0.146767),
      (re =>   -0.661997, im =>    0.143333),
      (re =>   -0.661485, im =>    0.139912),
      (re =>   -0.660987, im =>    0.136503),
      (re =>   -0.660503, im =>    0.133105),
      (re =>   -0.660033, im =>    0.129718),
      (re =>   -0.659576, im =>    0.126341),
      (re =>   -0.659133, im =>    0.122976),
      (re =>   -0.658703, im =>    0.119620),
      (re =>   -0.658286, im =>    0.116274),
      (re =>   -0.657882, im =>    0.112938),
      (re =>   -0.657491, im =>    0.109611),
      (re =>   -0.657112, im =>    0.106293),
      (re =>   -0.656746, im =>    0.102983),
      (re =>   -0.656392, im =>    0.099682),
      (re =>   -0.656051, im =>    0.096389),
      (re =>   -0.655722, im =>    0.093103),
      (re =>   -0.655405, im =>    0.089825),
      (re =>   -0.655101, im =>    0.086555),
      (re =>   -0.654808, im =>    0.083291),
      (re =>   -0.654526, im =>    0.080034),
      (re =>   -0.654257, im =>    0.076783),
      (re =>   -0.653999, im =>    0.073539),
      (re =>   -0.653753, im =>    0.070300),
      (re =>   -0.653518, im =>    0.067067),
      (re =>   -0.653295, im =>    0.063839),
      (re =>   -0.653083, im =>    0.060616),
      (re =>   -0.652882, im =>    0.057398),
      (re =>   -0.652693, im =>    0.054185),
      (re =>   -0.652514, im =>    0.050975),
      (re =>   -0.652347, im =>    0.047770),
      (re =>   -0.652191, im =>    0.044569),
      (re =>   -0.652045, im =>    0.041371),
      (re =>   -0.651911, im =>    0.038176),
      (re =>   -0.651788, im =>    0.034984),
      (re =>   -0.651675, im =>    0.031795),
      (re =>   -0.651573, im =>    0.028608),
      (re =>   -0.651482, im =>    0.025424),
      (re =>   -0.651402, im =>    0.022242),
      (re =>   -0.651333, im =>    0.019061),
      (re =>   -0.651274, im =>    0.015882),
      (re =>   -0.651226, im =>    0.012704),
      (re =>   -0.651189, im =>    0.009527),
      (re =>   -0.651162, im =>    0.006351),
      (re =>   -0.651146, im =>    0.003175),
      (re =>   -0.651141, im =>    0.000000),
      (re =>   -0.651146, im =>   -0.003175),
      (re =>   -0.651162, im =>   -0.006351),
      (re =>   -0.651189, im =>   -0.009527),
      (re =>   -0.651226, im =>   -0.012704),
      (re =>   -0.651274, im =>   -0.015882),
      (re =>   -0.651333, im =>   -0.019061),
      (re =>   -0.651402, im =>   -0.022242),
      (re =>   -0.651482, im =>   -0.025424),
      (re =>   -0.651573, im =>   -0.028608),
      (re =>   -0.651675, im =>   -0.031795),
      (re =>   -0.651788, im =>   -0.034984),
      (re =>   -0.651911, im =>   -0.038176),
      (re =>   -0.652045, im =>   -0.041371),
      (re =>   -0.652191, im =>   -0.044569),
      (re =>   -0.652347, im =>   -0.047770),
      (re =>   -0.652514, im =>   -0.050975),
      (re =>   -0.652693, im =>   -0.054185),
      (re =>   -0.652882, im =>   -0.057398),
      (re =>   -0.653083, im =>   -0.060616),
      (re =>   -0.653295, im =>   -0.063839),
      (re =>   -0.653518, im =>   -0.067067),
      (re =>   -0.653753, im =>   -0.070300),
      (re =>   -0.653999, im =>   -0.073539),
      (re =>   -0.654257, im =>   -0.076783),
      (re =>   -0.654526, im =>   -0.080034),
      (re =>   -0.654808, im =>   -0.083291),
      (re =>   -0.655101, im =>   -0.086555),
      (re =>   -0.655405, im =>   -0.089825),
      (re =>   -0.655722, im =>   -0.093103),
      (re =>   -0.656051, im =>   -0.096389),
      (re =>   -0.656392, im =>   -0.099682),
      (re =>   -0.656746, im =>   -0.102983),
      (re =>   -0.657112, im =>   -0.106293),
      (re =>   -0.657491, im =>   -0.109611),
      (re =>   -0.657882, im =>   -0.112938),
      (re =>   -0.658286, im =>   -0.116274),
      (re =>   -0.658703, im =>   -0.119620),
      (re =>   -0.659133, im =>   -0.122976),
      (re =>   -0.659576, im =>   -0.126341),
      (re =>   -0.660033, im =>   -0.129718),
      (re =>   -0.660503, im =>   -0.133105),
      (re =>   -0.660987, im =>   -0.136503),
      (re =>   -0.661485, im =>   -0.139912),
      (re =>   -0.661997, im =>   -0.143333),
      (re =>   -0.662523, im =>   -0.146767),
      (re =>   -0.663064, im =>   -0.150212),
      (re =>   -0.663619, im =>   -0.153671),
      (re =>   -0.664189, im =>   -0.157142),
      (re =>   -0.664773, im =>   -0.160627),
      (re =>   -0.665373, im =>   -0.164125),
      (re =>   -0.665989, im =>   -0.167638),
      (re =>   -0.666620, im =>   -0.171165),
      (re =>   -0.667267, im =>   -0.174707),
      (re =>   -0.667930, im =>   -0.178265),
      (re =>   -0.668609, im =>   -0.181837),
      (re =>   -0.669305, im =>   -0.185426),
      (re =>   -0.670018, im =>   -0.189031),
      (re =>   -0.670748, im =>   -0.192653),
      (re =>   -0.671495, im =>   -0.196293),
      (re =>   -0.672260, im =>   -0.199949),
      (re =>   -0.673042, im =>   -0.203624),
      (re =>   -0.673843, im =>   -0.207317),
      (re =>   -0.674663, im =>   -0.211030),
      (re =>   -0.675502, im =>   -0.214761),
      (re =>   -0.676359, im =>   -0.218512),
      (re =>   -0.677236, im =>   -0.222283),
      (re =>   -0.678134, im =>   -0.226075),
      (re =>   -0.679051, im =>   -0.229889),
      (re =>   -0.679989, im =>   -0.233723),
      (re =>   -0.680948, im =>   -0.237580),
      (re =>   -0.681928, im =>   -0.241460),
      (re =>   -0.682930, im =>   -0.245362),
      (re =>   -0.683955, im =>   -0.249288),
      (re =>   -0.685002, im =>   -0.253239),
      (re =>   -0.686072, im =>   -0.257214),
      (re =>   -0.687165, im =>   -0.261214),
      (re =>   -0.688283, im =>   -0.265240),
      (re =>   -0.689425, im =>   -0.269293),
      (re =>   -0.690592, im =>   -0.273372),
      (re =>   -0.691785, im =>   -0.277479),
      (re =>   -0.693004, im =>   -0.281615),
      (re =>   -0.694249, im =>   -0.285779),
      (re =>   -0.695522, im =>   -0.289972),
      (re =>   -0.696822, im =>   -0.294196),
      (re =>   -0.698150, im =>   -0.298450),
      (re =>   -0.699508, im =>   -0.302736),
      (re =>   -0.700895, im =>   -0.307054),
      (re =>   -0.702313, im =>   -0.311404),
      (re =>   -0.703761, im =>   -0.315788),
      (re =>   -0.705241, im =>   -0.320207),
      (re =>   -0.706754, im =>   -0.324661),
      (re =>   -0.708299, im =>   -0.329150),
      (re =>   -0.709879, im =>   -0.333676),
      (re =>   -0.711493, im =>   -0.338240),
      (re =>   -0.713143, im =>   -0.342842),
      (re =>   -0.714829, im =>   -0.347483),
      (re =>   -0.716553, im =>   -0.352164),
      (re =>   -0.718315, im =>   -0.356886),
      (re =>   -0.720116, im =>   -0.361649),
      (re =>   -0.721957, im =>   -0.366456),
      (re =>   -0.723840, im =>   -0.371307),
      (re =>   -0.725765, im =>   -0.376202),
      (re =>   -0.727733, im =>   -0.381143),
      (re =>   -0.729745, im =>   -0.386131),
      (re =>   -0.731803, im =>   -0.391167),
      (re =>   -0.733908, im =>   -0.396252),
      (re =>   -0.736061, im =>   -0.401387),
      (re =>   -0.738263, im =>   -0.406573),
      (re =>   -0.740516, im =>   -0.411812),
      (re =>   -0.742821, im =>   -0.417105),
      (re =>   -0.745180, im =>   -0.422453),
      (re =>   -0.747593, im =>   -0.427857),
      (re =>   -0.750063, im =>   -0.433319),
      (re =>   -0.752592, im =>   -0.438840),
      (re =>   -0.755180, im =>   -0.444422),
      (re =>   -0.757830, im =>   -0.450066),
      (re =>   -0.760543, im =>   -0.455773),
      (re =>   -0.763321, im =>   -0.461545),
      (re =>   -0.766166, im =>   -0.467384),
      (re =>   -0.769081, im =>   -0.473292),
      (re =>   -0.772067, im =>   -0.479269),
      (re =>   -0.775126, im =>   -0.485319),
      (re =>   -0.778261, im =>   -0.491441),
      (re =>   -0.781474, im =>   -0.497640),
      (re =>   -0.784768, im =>   -0.503916),
      (re =>   -0.788144, im =>   -0.510271),
      (re =>   -0.791606, im =>   -0.516708),
      (re =>   -0.795157, im =>   -0.523229),
      (re =>   -0.798799, im =>   -0.529835),
      (re =>   -0.802535, im =>   -0.536530),
      (re =>   -0.806369, im =>   -0.543315),
      (re =>   -0.810304, im =>   -0.550193),
      (re =>   -0.814342, im =>   -0.557166),
      (re =>   -0.818489, im =>   -0.564238),
      (re =>   -0.822746, im =>   -0.571410),
      (re =>   -0.827119, im =>   -0.578686),
      (re =>   -0.831611, im =>   -0.586069),
      (re =>   -0.836227, im =>   -0.593561),
      (re =>   -0.840971, im =>   -0.601165),
      (re =>   -0.845847, im =>   -0.608886),
      (re =>   -0.850861, im =>   -0.616726),
      (re =>   -0.856018, im =>   -0.624688),
      (re =>   -0.861322, im =>   -0.632777),
      (re =>   -0.866780, im =>   -0.640997),
      (re =>   -0.872397, im =>   -0.649350),
      (re =>   -0.878179, im =>   -0.657841),
      (re =>   -0.884134, im =>   -0.666475),
      (re =>   -0.890267, im =>   -0.675256),
      (re =>   -0.896586, im =>   -0.684188),
      (re =>   -0.903098, im =>   -0.693277),
      (re =>   -0.909811, im =>   -0.702527),
      (re =>   -0.916734, im =>   -0.711943),
      (re =>   -0.923875, im =>   -0.721531),
      (re =>   -0.931243, im =>   -0.731297),
      (re =>   -0.938848, im =>   -0.741247),
      (re =>   -0.946700, im =>   -0.751386),
      (re =>   -0.954810, im =>   -0.761722),
      (re =>   -0.963190, im =>   -0.772260),
      (re =>   -0.971851, im =>   -0.783009),
      (re =>   -0.980807, im =>   -0.793976),
      (re =>   -0.990070, im =>   -0.805168),
      (re =>   -0.999655, im =>   -0.816593),
      (re =>   -1.009577, im =>   -0.828261),
      (re =>   -1.019853, im =>   -0.840180),
      (re =>   -1.030498, im =>   -0.852360),
      (re =>   -1.041532, im =>   -0.864810),
      (re =>   -1.052974, im =>   -0.877542),
      (re =>   -1.064844, im =>   -0.890566),
      (re =>   -1.077163, im =>   -0.903894),
      (re =>   -1.089956, im =>   -0.917538),
      (re =>   -1.103247, im =>   -0.931512),
      (re =>   -1.117062, im =>   -0.945828),
      (re =>   -1.131430, im =>   -0.960502),
      (re =>   -1.146382, im =>   -0.975548),
      (re =>   -1.161949, im =>   -0.990983),
      (re =>   -1.178166, im =>   -1.006825),
      (re =>   -1.195072, im =>   -1.023091),
      (re =>   -1.212706, im =>   -1.039800),
      (re =>   -1.231111, im =>   -1.056975),
      (re =>   -1.250334, im =>   -1.074635),
      (re =>   -1.270425, im =>   -1.092806),
      (re =>   -1.291440, im =>   -1.111511),
      (re =>   -1.313435, im =>   -1.130777),
      (re =>   -1.336476, im =>   -1.150634),
      (re =>   -1.360630, im =>   -1.171111),
      (re =>   -1.385974, im =>   -1.192241),
      (re =>   -1.412588, im =>   -1.214059),
      (re =>   -1.440563, im =>   -1.236604),
      (re =>   -1.469994, im =>   -1.259916),
      (re =>   -1.500988, im =>   -1.284038),
      (re =>   -1.533662, im =>   -1.309018),
      (re =>   -1.568144, im =>   -1.334907),
      (re =>   -1.604575, im =>   -1.361761),
      (re =>   -1.643110, im =>   -1.389641),
      (re =>   -1.683922, im =>   -1.418611),
      (re =>   -1.727200, im =>   -1.448744),
      (re =>   -1.773156, im =>   -1.480117),
      (re =>   -1.822027, im =>   -1.512816),
      (re =>   -1.874077, im =>   -1.546936),
      (re =>   -1.929601, im =>   -1.582580),
      (re =>   -1.988931, im =>   -1.619861),
      (re =>   -2.052444, im =>   -1.658906),
      (re =>   -2.120565, im =>   -1.699855),
      (re =>   -2.193777, im =>   -1.742865),
      (re =>   -2.272634, im =>   -1.788108),
      (re =>   -2.357771, im =>   -1.835781),
      (re =>   -2.449918, im =>   -1.886103),
      (re =>   -2.549924, im =>   -1.939321),
      (re =>   -2.658780, im =>   -1.995719),
      (re =>   -2.777646, im =>   -2.055615),
      (re =>   -2.907896, im =>   -2.119380),
      (re =>   -3.051164, im =>   -2.187436),
      (re =>   -3.209413, im =>   -2.260275),
      (re =>   -3.385025, im =>   -2.338472),
      (re =>   -3.580915, im =>   -2.422702),
      (re =>   -3.800694, im =>   -2.513767),
      (re =>   -4.048901, im =>   -2.612626),
      (re =>   -4.331317, im =>   -2.720443),
      (re =>   -4.655442, im =>   -2.838642),
      (re =>   -5.031198, im =>   -2.968995),
      (re =>   -5.472024, im =>   -3.113747),
      (re =>   -5.996639, im =>   -3.275798),
      (re =>   -6.632003, im =>   -3.458996),
      (re =>   -7.418586, im =>   -3.668624),
      (re =>   -8.420366, im =>   -3.912255),
      (re =>   -9.745463, im =>   -4.201425),
      (re =>  -11.593665, im =>   -4.555272),
      (re =>  -14.383555, im =>   -5.009869),
      (re =>  -19.176901, im =>   -5.648397),
      (re =>  -29.737707, im =>   -6.744859),
      (re =>  -76.878968, im =>  -10.449459),
      (re =>   84.530158, im =>    0.153136),
      (re =>   21.467936, im =>   -4.920477),
      (re =>    8.816070, im =>   -6.750553),
      (re =>    2.153261, im =>   -8.561038),
      (re =>   -3.430564, im =>  -11.009770),
      (re =>  -10.291606, im =>  -15.049123),
      (re =>  -22.824658, im =>  -23.626935),
      (re =>  -67.663872, im =>  -56.281740),
      (re =>  184.024138, im =>  129.993073),
      (re =>   47.013247, im =>   29.010643),
      (re =>   29.004652, im =>   15.873692),
      (re =>   21.798369, im =>   10.662970),
      (re =>   17.890038, im =>    7.845200),
      (re =>   15.434312, im =>    6.064346),
      (re =>   13.754122, im =>    4.825119),
      (re =>   12.541484, im =>    3.903260),
      (re =>   11.635841, im =>    3.182211),
      (re =>   10.945268, im =>    2.595168),
      (re =>   10.413486, im =>    2.100870),
      (re =>   10.004356, im =>    1.672233),
      (re =>    9.693927, im =>    1.290498),
      (re =>    9.466089, im =>    0.941996),
      (re =>    9.310078, im =>    0.616236),
      (re =>    9.219019, im =>    0.304696)
    )
  );

  function test_data_inputs(p : positive) return complex_vector_arr_t;

  function test_data_outputs(p : positive) return complex_vector_arr_t;

end package;


package body test_data_fft_pkg is

  function test_data_inputs(p : positive) return complex_vector_arr_t is
  begin
    case p is
      when      4 => return work.test_data_fft_pkg.input_data_point4_c;
      when      8 => return work.test_data_fft_pkg.input_data_point8_c;
      when     16 => return work.test_data_fft_pkg.input_data_point16_c;
      when     32 => return work.test_data_fft_pkg.input_data_point32_c;
      when    512 => return work.test_data_fft_pkg.input_data_point512_c;
      when others =>
        report "Missing test data for " & integer'image(p) severity error;
        -- A nonsense value to keep the compiler quiet about not returning a anything
        return (0 => (0 => (re => 0.0, im => 0.0)));
    end case;
  end function;


  function test_data_outputs(p : positive) return complex_vector_arr_t is
  begin
    case p is
      when      4 => return work.test_data_fft_pkg.output_data_point4_c;
      when      8 => return work.test_data_fft_pkg.output_data_point8_c;
      when     16 => return work.test_data_fft_pkg.output_data_point16_c;
      when     32 => return work.test_data_fft_pkg.output_data_point32_c;
      when    512 => return work.test_data_fft_pkg.output_data_point512_c;
      when others =>
        report "Missing test data for " & integer'image(p) severity error;
        -- A nonsense value to keep the compiler quiet about not returning a anything
        return (0 => (0 => (re => 0.0, im => 0.0)));
    end case;
  end function;

end package body;
